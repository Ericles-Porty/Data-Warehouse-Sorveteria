-- ETL STAGING AREA TO OLAP

CREATE SEQUENCE SQ_GRUPO_ADICIONAL START WITH 1 INCREMENT BY 1

-- PRODUTO
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_PRODUTO(@DATA DATETIME)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @DATA_CARGA DATETIME, @ID_PRODUTO INT, @PRODUTO VARCHAR(50), @VALOR NUMERIC(10, 2)
	DECLARE @PRODUTO_TEMP VARCHAR(50), @VALOR_TEMP NUMERIC(10, 2)

	DECLARE C_PRODUTO CURSOR
	FOR SELECT P.DATA_CARGA, P.ID_PRODUTO, P.PRODUTO, P.VALOR FROM AUX_PRODUTO P

	OPEN C_PRODUTO
	FETCH C_PRODUTO INTO @DATA_CARGA, @ID_PRODUTO, @PRODUTO, @VALOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE PRODUCT NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT ID FROM DIM_PRODUTO WHERE @ID_PRODUTO = COD)
		BEGIN
			INSERT INTO DIM_PRODUTO(COD, PRODUTO, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
			VALUES(@ID_PRODUTO, @PRODUTO, @VALOR, @DATA_CARGA, NULL, 'SIM')	
		END
		-- IF THE PRODUCT ALREADY EXISTS IN THE OLAP THEN 
		ELSE
		BEGIN
			-- GETTING THE OLDER VERSION OF PRODUCT
			SELECT @PRODUTO_TEMP = P.PRODUTO, @VALOR_TEMP = P.VALOR
			FROM DIM_PRODUTO P
			WHERE P.COD = @ID_PRODUTO AND P.FL_CORRENTE = 'SIM'

			-- VERIFY IF THE PRODUCT HAS CHANGED
			IF @PRODUTO_TEMP <> @PRODUTO OR @VALOR_TEMP <> @VALOR
			BEGIN
				-- UPDATE THE OLDER VERSION OF PRODUCT WITH THE END DATE AND FL_CORRENTE = 'NAO'
				UPDATE DIM_PRODUTO
				SET FL_CORRENTE = 'NAO', DATA_FIM = @DATA
				WHERE COD = @ID_PRODUTO AND FL_CORRENTE = 'SIM'

				-- INSERT THE NEW VERSION OF PRODUCT
				INSERT INTO DIM_PRODUTO(COD, PRODUTO, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
				VALUES(@ID_PRODUTO, @PRODUTO, @VALOR, @DATA_CARGA, NULL, 'SIM')
			END
		END
		FETCH C_PRODUTO INTO @DATA_CARGA, @ID_PRODUTO, @PRODUTO, @VALOR
	END
	CLOSE C_PRODUTO
	DEALLOCATE C_PRODUTO
END

-- ADICIONAL
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_ADICIONAL(@DATA DATETIME)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @DATA_CARGA DATETIME, @ID_ADICIONAL INT, @ADICIONAL VARCHAR(50), @VALOR NUMERIC(10, 2)
	DECLARE @ADICIONAL_TEMP VARCHAR(50), @VALOR_TEMP NUMERIC(10, 2)

	DECLARE C_ADICIONAL CURSOR
	FOR SELECT A.DATA_CARGA, A.ID_ADICIONAL, A.ADICIONAL, A.VALOR FROM AUX_ADICIONAL A

	OPEN C_ADICIONAL
	FETCH C_ADICIONAL INTO @DATA_CARGA, @ID_ADICIONAL, @ADICIONAL, @VALOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE ADICIONAL NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT ID FROM DIM_ADICIONAL WHERE @ID_ADICIONAL = ID)
		BEGIN
			INSERT INTO DIM_ADICIONAL(COD, ADICIONAL, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
			VALUES(@ID_ADICIONAL, @ADICIONAL, @VALOR, @DATA_CARGA, NULL, 'SIM')	
		END
		-- IF THE ADICIONAL ALREADY EXISTS IN THE OLAP THEN 
		ELSE
		BEGIN
			-- GETTING THE OLDER VERSION OF ADICIONAL
			SELECT @ADICIONAL_TEMP = A.ADICIONAL, @VALOR_TEMP = A.VALOR
			FROM DIM_ADICIONAL A
			WHERE A.COD = @ID_ADICIONAL AND A.FL_CORRENTE = 'SIM'

			-- VERIFY IF THE ADICIONAL HAS CHANGED
			IF @ADICIONAL_TEMP <> @ADICIONAL OR @VALOR_TEMP <> @VALOR
			BEGIN
				-- UPDATE THE OLDER VERSION OF ADICIONAL WITH THE END DATE AND FL_CORRENTE = 'NAO'
				UPDATE DIM_ADICIONAL
				SET FL_CORRENTE = 'NAO', DATA_FIM = @DATA
				WHERE COD = @ID_ADICIONAL AND FL_CORRENTE = 'SIM'

				-- INSERT THE NEW VERSION OF ADICIONAL
				INSERT INTO DIM_ADICIONAL(COD, ADICIONAL, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
				VALUES(@ID_ADICIONAL,@ADICIONAL, @VALOR, @DATA_CARGA, NULL, 'SIM')
			END
		END
		FETCH C_ADICIONAL INTO @DATA_CARGA, @ID_ADICIONAL, @ADICIONAL, @VALOR
	END
	CLOSE C_ADICIONAL
	DEALLOCATE C_ADICIONAL
END

-- SABOR
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_SABOR
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_SABOR INT, @SABOR VARCHAR(50)

	DECLARE C_SABOR CURSOR
	FOR SELECT S.ID_SABOR, S.SABOR FROM AUX_SABOR S

	OPEN C_SABOR
	FETCH C_SABOR INTO @ID_SABOR, @SABOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE SABOR NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT S.ID FROM DIM_SABOR S WHERE @ID_SABOR = S.ID)
		BEGIN
			INSERT INTO DIM_SABOR(COD, SABOR)
			VALUES(@ID_SABOR, @SABOR)
		END
		-- IF THE SABOR ALREADY EXISTS IN THE OLAP THEN UPDATE
		ELSE
		BEGIN
			UPDATE DIM_SABOR
			SET SABOR = @SABOR
			WHERE COD = @ID_SABOR 
		END
		FETCH C_SABOR INTO @ID_SABOR, @SABOR
	END
	CLOSE C_SABOR
	DEALLOCATE C_SABOR
END

-- LOCAL
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_LOCAL
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_LOCAL INT, @ESTADO VARCHAR(2), @CIDADE VARCHAR(255), @BAIRRO VARCHAR(255), @RUA VARCHAR(255), @NUMERO VARCHAR(8)

	DECLARE C_LOCAL CURSOR
	FOR SELECT L.ID, L.ESTADO, L.CIDADE, L.BAIRRO, L.RUA, L.NUMERO FROM AUX_LOCAL L

	OPEN C_LOCAL
	FETCH C_LOCAL INTO @ID_LOCAL, @ESTADO, @CIDADE, @BAIRRO, @RUA, @NUMERO

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE LOCAL NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT L.ID FROM DIM_LOCAL L WHERE @ID_LOCAL = L.ID)
		BEGIN
			INSERT INTO DIM_LOCAL(COD, ESTADO, CIDADE, BAIRRO, RUA, NUMERO)
			VALUES(@ID_ESTADO, @ESTADO, @CIDADE, @BAIRRO, @RUA, @NUMERO)	
		END
		-- IF THE LOCAL ALREADY EXISTS IN THE OLAP THEN UPDATE
		ELSE
		BEGIN
			UPDATE DIM_LOCAL
			SET ESTADO = @ESTADO, 
				CIDADE = @CIDADE, 
				BAIRRO = @BAIRRO, 
				RUA = @RUA, 
				NUMERO = @NUMERO
			WHERE COD = @ID_LOCAL 
		END
		FETCH C_LOCAL INTO @ID_LOCAL, @ESTADO, @CIDADE, @BAIRRO, @RUA, @NUMERO
	END
	CLOSE C_LOCAL
	DEALLOCATE C_LOCAL
END

-- ESTABELECIMENTO
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_ESTABELECIMENTO
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_ESTABELECIMENTO INT, @ID_LOCAL INT, @NOME VARCHAR(255), @CNPJ VARCHAR(14)

	DECLARE C_ESTABELECIMENTO CURSOR
	FOR SELECT E.ID,E.ID_LOCAL, E.NOME, E.CNPJ FROM AUX_ESTABELECIMENTO E

	OPEN C_ESTABELECIMENTO
	FETCH C_ESTABELECIMENTO INTO @ID_ESTABELECIMENTO, @ID_LOCAL, @NOME, @CNPJ

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE ESTABELECIMENTO NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT E.ID FROM DIM_ESTABELECIMENTO E WHERE @ID_ESTABELECIMENTO = E.ID)
		BEGIN
			INSERT INTO DIM_ESTABELECIMENTO(COD, ID_LOCAL, NOME, CNPJ)
			VALUES(@ID_ESTABELECIMENTO, @ID_LOCAL, @NOME, @CNPJ)	
		END
		-- IF THE ESTABELECIMENTO ALREADY EXISTS IN THE OLAP THEN UPDATE
		ELSE
		BEGIN
			UPDATE DIM_ESTABELECIMENTO
			SET NOME = @NOME, 
				CNPJ = @CNPJ
			WHERE COD = @ID_ESTABELECIMENTO 
		END
		FETCH C_ESTABELECIMENTO INTO @ID_ESTABELECIMENTO, @ID_LOCAL, @NOME, @CNPJ
	END
	CLOSE C_ESTABELECIMENTO
	DEALLOCATE C_ESTABELECIMENTO
END

-- BRIDGE ADICIONAL
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_BRIDGE_ADICIONAL
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_GRUPO_ADICIONAL INT, @QTD_ADICIONAIS INT, @FLAG INT
	DECLARE @ID_ADICIONAL INT, @ID_ITEM INT, @ID_GRUPO INT, @ID_ADICIONAL_GRUPO INT

	-- CURSOR ITENS STAGING 1
	DECLARE C_ITEM CURSOR FOR SELECT DISTINCT(ID_ITEM) FROM AUX_ITEM_ADICIONAL
	OPEN C_ITEM
	FETCH C_ITEM INTO @ID_ITEM
	
	WHILE(@@FETCH_STATUS = 0)
	BEGIN
		SET @QTD_ADICIONAIS = (SELECT COUNT(*) FROM AUX_ITEM_ADICIONAL WHERE ID_ITEM = @ID_ITEM)
		-- CURSOR ADICIONAIS DOS ITENS STAGING 2
		DECLARE C_ADICIONAL SCROLL CURSOR FOR 
			SELECT ID_ADICIONAL FROM AUX_ITEM_ADICIONAL WHERE ID_ITEM = @ID_ITEM ORDER BY ID_ADICIONAL
		OPEN C_ADICIONAL
		FETCH FIRST FROM C_ADICIONAL INTO @ID_ADICIONAL

		WHILE @@FETCH_STATUS = 0
		BEGIN
			-- CURSOR DOS GRUPOS DW 3
			DECLARE C_GRUPO SCROLL CURSOR FOR 
				SELECT DISTINCT(ID_GRUPO) FROM BRIDGE_ADICIONAL
			OPEN C_GRUPO
			FETCH FIRST FROM C_GRUPO INTO @ID_GRUPO

			SET @FLAG = 1
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF (SELECT COUNT(BA.ID_ADICIONAIS) 
					FROM BRIDGE_ADICIONAL BA 
					WHERE BA.ID_GRUPO = @ID_GRUPO) = @QTD_ADICIONAIS
				BEGIN
				-- CURSOR DOS ADICIONAIS DO GRUPO DW 4
					DECLARE C_ADICIONAL_GRUPO SCROLL CURSOR FOR 
						SELECT A.COD FROM BRIDGE_ADICIONAL BA 
							JOIN DIM_ADICIONAL A ON(A.ID = BA.ID_ADICIONAIS)
						WHERE BA.ID_GRUPO = @ID_GRUPO 
						ORDER BY A.COD
					OPEN C_ADICIONAL_GRUPO
					FETCH FIRST FROM C_ADICIONAL_GRUPO INTO @ID_ADICIONAL_GRUPO
					SET @FLAG = 0
					SET @ID_GRUPO_ADICIONAL = @ID_GRUPO

					WHILE @@FETCH_STATUS = 0
					BEGIN
						--PRINT @ID_ADICIONAL
						--PRINT @ID_ADICIONAL_GRUPO
						IF @ID_ADICIONAL_GRUPO = @ID_ADICIONAL
						BEGIN
							SET @FLAG = 0
							FETCH NEXT FROM C_ADICIONAL INTO @ID_ADICIONAL
							FETCH NEXT FROM C_ADICIONAL_GRUPO INTO @ID_ADICIONAL_GRUPO
						END
						ELSE 
						BEGIN
							SET @FLAG = 1
							FETCH FIRST FROM C_ADICIONAL INTO @ID_ADICIONAL
							BREAK
						END
					END
					IF @FLAG = 0
					BEGIN
						UPDATE FATO_VENDA
						SET ID_GRUPO_ADICIONAIS = @ID_GRUPO_ADICIONAL
						WHERE COD_ITEM = @ID_ITEM

						FETCH LAST FROM C_GRUPO
					END

					CLOSE C_ADICIONAL_GRUPO
					DEALLOCATE C_ADICIONAL_GRUPO
				END

				FETCH NEXT FROM C_GRUPO INTO @ID_GRUPO
				IF @@FETCH_STATUS = 0 AND @FLAG = 1
				BEGIN
					BREAK
				END
			END
			IF @@FETCH_STATUS <> 0 AND @FLAG = 1
			BEGIN
				PRINT 'ENTROUUUUUUUUUUUUUUUUUUU'
				--OPEN C_ADICIONAL_GRUPO
				SET @ID_GRUPO_ADICIONAL = NEXT VALUE FOR SQ_GRUPO_ADICIONAL
				INSERT INTO DIM_GRUPO_ADICIONAL(ID)
				VALUES(@ID_GRUPO_ADICIONAL)
				--PRINT @ID_GRUPO_ADICIONAL
				--FETCH FIRST FROM C_ADICIONAL_GRUPO INTO @ID_ADICIONAL_GRUPO
				FETCH FIRST FROM C_ADICIONAL INTO @ID_ADICIONAL
				WHILE @@FETCH_STATUS = 0
				BEGIN
					INSERT INTO BRIDGE_ADICIONAL(ID_GRUPO, ID_ADICIONAIS)
					VALUES(@ID_GRUPO_ADICIONAL, @ID_ADICIONAL)
					--SELECT @ID_GRUPO_ADICIONAL, ID_ADICIONAL FROM AUX_ITEM_ADICIONAL WHERE ID_ITEM = @ID_ITEM ORDER BY ID_ADICIONAL
					--VALUES(@ID_GRUPO_ADICIONAL, @ID_ADICIONAL_GRUPO)
					FETCH NEXT FROM C_ADICIONAL INTO @ID_ADICIONAL
				END
				UPDATE FATO_VENDA
				SET ID_GRUPO_ADICIONAIS = @ID_GRUPO_ADICIONAL
				WHERE COD_ITEM = @ID_ITEM

				--CLOSE C_ADICIONAL_GRUPO
			END

			CLOSE C_GRUPO
			DEALLOCATE C_GRUPO

			FETCH NEXT FROM C_ADICIONAL INTO @ID_ADICIONAL
		END
		CLOSE C_ADICIONAL
		DEALLOCATE C_ADICIONAL

		FETCH C_ITEM INTO @ID_ITEM
	END
	
	CLOSE C_ITEM
	DEALLOCATE C_ITEM
END

-- FATO VENDA
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_FATO_VENDA
AS
BEGIN
	DECLARE @ID_DATA_VENDA BIGINT
	DECLARE @DATA_VENDA DATETIME, @ID_VENDA INT, @ID_ITEM INT, @ID_SABOR INT, @ID_ESTABELECIMENTO INT, @ID_LOCAL INT, @ID_PRODUTO INT, @QUANTIDADE INT, @VALOR DECIMAL(10,2)
	DECLARE C_FATO_VENDA CURSOR FOR 
	SELECT DATA_VENDA, ID_VENDA, ID_ITEM, ID_SABOR, ID_ESTABELECIMENTO, ID_LOCAL, ID_PRODUTO, VALOR 
	FROM AUX_FATO_VENDA

	OPEN C_FATO_VENDA
	FETCH C_FATO_VENDA INTO @DATA_VENDA, @ID_VENDA, @ID_ITEM, @ID_SABOR, @ID_ESTABELECIMENTO, @ID_LOCAL, @ID_PRODUTO, @VALOR
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @ID_DATA_VENDA = (SELECT ID FROM DIM_TEMPO T WHERE T.DATA = @DATA_VENDA)
		
		INSERT INTO FATO_VENDA(COD_ITEM, ID_DATA_DA_VENDA, ID_SABOR, ID_ESTABELECIMENTO, ID_LOCAL, ID_PRODUTO, QUANTIDADE, VALOR)
		VALUES(@ID_ITEM, @ID_DATA_VENDA, @ID_SABOR, @ID_ESTABELECIMENTO, @ID_LOCAL, @ID_PRODUTO, 1, @VALOR)

		FETCH C_FATO_VENDA INTO @DATA_VENDA, @ID_VENDA, @ID_ITEM, @ID_SABOR, @ID_ESTABELECIMENTO, @ID_LOCAL, @ID_PRODUTO, @VALOR
	END
	CLOSE C_FATO_VENDA
	DEALLOCATE C_FATO_VENDA
END
GO
SELECT * FROM FATO_VENDA

-- DQL
EXEC SP_DIM_PRODUTO '2022-01-01'

EXEC SP_ETL_STAGING_TO_OLAP_BRIDGE_ADICIONAL

SELECT * FROM DIM_GRUPO_ADICIONAL

SELECT * FROM DIM_PRODUTO

SELECT * FROM DIM_ADICIONAL

TRUNCATE TABLE FATO_VENDA

select * from BRIDGE_ADICIONAL

EXEC SP_ETL_STAGING_TO_OLAP_ADICIONAL '2022-01-01'
EXEC SP_ETL_STAGING_TO_OLAP_LOCAL
EXEC SP_ETL_STAGING_TO_OLAP_ESTABELECIMENTO
EXEC SP_ETL_STAGING_TO_OLAP_FATO_VENDA

SELECT * FROM TB_LOCAL
SELECT * FROM AUX_LOCAL
SELECT * FROM DIM_LOCAL
SELECT * FROM DIM_ESTABELECIMENTO