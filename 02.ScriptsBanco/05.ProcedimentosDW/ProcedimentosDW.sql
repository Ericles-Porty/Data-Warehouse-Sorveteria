-- ETL STAGING AREA TO OLAP

-- PRODUTO
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_PRODUTO(@DATA DATETIME)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @DATA_CARGA DATETIME, @ID_PRODUTO INT, @PRODUTO VARCHAR(50), @VALOR NUMERIC(10, 2)
	DECLARE @PRODUTO_TEMP VARCHAR(50), @VALOR_TEMP NUMERIC(10, 2)

	DECLARE C_PRODUTO CURSOR
	FOR SELECT P.DATA_CARGA, P.ID_PRODUTO, P.PRODUTO, P.VALOR FROM AUX_PRODUTO P

	OPEN C_PRODUTO
	FETCH C_PRODUTO INTO @DATA_CARGA, @ID_PRODUTO, @PRODUTO, @VALOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE PRODUCT NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT ID FROM DIM_PRODUTO WHERE @ID_PRODUTO = ID)
		BEGIN
			INSERT INTO DIM_PRODUTO(PRODUTO, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
			VALUES(@PRODUTO, @VALOR, @DATA_CARGA, NULL, 'SIM')	
		END
		-- IF THE PRODUCT ALREADY EXISTS IN THE OLAP THEN 
		ELSE
		BEGIN
			-- GETTING THE OLDER VERSION OF PRODUCT
			SELECT @PRODUTO_TEMP = P.PRODUTO, @VALOR_TEMP = P.VALOR
			FROM DIM_PRODUTO P
			WHERE P.ID = @ID_PRODUTO AND P.FL_CORRENTE = 'SIM'

			-- VERIFY IF THE PRODUCT HAS CHANGED
			IF @PRODUTO_TEMP <> @PRODUTO OR @VALOR_TEMP <> @VALOR
			BEGIN
				-- UPDATE THE OLDER VERSION OF PRODUCT WITH THE END DATE AND FL_CORRENTE = 'NAO'
				UPDATE DIM_PRODUTO
				SET FL_CORRENTE = 'NAO', DATA_FIM = @DATA
				WHERE ID = @ID_PRODUTO AND FL_CORRENTE = 'SIM'

				-- INSERT THE NEW VERSION OF PRODUCT
				INSERT INTO DIM_PRODUTO(PRODUTO, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
				VALUES(@PRODUTO, @VALOR, @DATA_CARGA, NULL, 'SIM')
			END
		END
		FETCH C_PRODUTO INTO @DATA_CARGA, @ID_PRODUTO, @PRODUTO, @VALOR
	END
	CLOSE C_PRODUTO
	DEALLOCATE C_PRODUTO
END

-- ADICIONAL
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_ADICIONAL(@DATA DATETIME)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @DATA_CARGA DATETIME, @ID_ADICIONAL INT, @ADICIONAL VARCHAR(50), @VALOR NUMERIC(10, 2)
	DECLARE @ADICIONAL_TEMP VARCHAR(50), @VALOR_TEMP NUMERIC(10, 2)

	DECLARE C_ADICIONAL CURSOR
	FOR SELECT A.DATA_CARGA, A.ID_ADICIONAL, A.ADICIONAL, A.VALOR FROM AUX_ADICIONAL A

	OPEN C_ADICIONAL
	FETCH C_ADICIONAL INTO @DATA_CARGA, @ID_ADICIONAL, @ADICIONAL, @VALOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE ADICIONAL NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT ID FROM DIM_ADICIONAL WHERE @ID_ADICIONAL = ID)
		BEGIN
			INSERT INTO DIM_ADICIONAL(ADICIONAL, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
			VALUES(@ADICIONAL, @VALOR, @DATA_CARGA, NULL, 'SIM')	
		END
		-- IF THE ADICIONAL ALREADY EXISTS IN THE OLAP THEN 
		ELSE
		BEGIN
			-- GETTING THE OLDER VERSION OF ADICIONAL
			SELECT @ADICIONAL_TEMP = A.ADICIONAL, @VALOR_TEMP = A.VALOR
			FROM DIM_ADICIONAL A
			WHERE A.ID = @ID_ADICIONAL AND A.FL_CORRENTE = 'SIM'

			-- VERIFY IF THE ADICIONAL HAS CHANGED
			IF @ADICIONAL_TEMP <> @ADICIONAL OR @VALOR_TEMP <> @VALOR
			BEGIN
				-- UPDATE THE OLDER VERSION OF ADICIONAL WITH THE END DATE AND FL_CORRENTE = 'NAO'
				UPDATE DIM_ADICIONAL
				SET FL_CORRENTE = 'NAO', DATA_FIM = @DATA
				WHERE ID = @ID_ADICIONAL AND FL_CORRENTE = 'SIM'

				-- INSERT THE NEW VERSION OF ADICIONAL
				INSERT INTO DIM_ADICIONAL(ADICIONAL, VALOR, DATA_INICIO, DATA_FIM, FL_CORRENTE)
				VALUES(@ADICIONAL, @VALOR, @DATA_CARGA, NULL, 'SIM')
			END
		END
		FETCH C_ADICIONAL INTO @DATA_CARGA, @ID_ADICIONAL, @ADICIONAL, @VALOR
	END
	CLOSE C_ADICIONAL
	DEALLOCATE C_ADICIONAL
END

-- SABOR
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_SABOR
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_SABOR INT, @SABOR VARCHAR(50)

	DECLARE C_SABOR CURSOR
	FOR SELECT S.ID_SABOR, S.SABOR FROM AUX_SABOR S

	OPEN C_SABOR
	FETCH C_SABOR INTO @ID_SABOR, @SABOR

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE SABOR NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT S.ID FROM DIM_SABOR S WHERE @ID_SABOR = S.ID)
		BEGIN
			INSERT INTO DIM_SABOR(SABOR)
			VALUES(@SABOR)	
		END
		-- IF THE SABOR ALREADY EXISTS IN THE OLAP THEN UPDATE
		ELSE
		BEGIN
			UPDATE DIM_SABOR
			SET SABOR = @SABOR
			WHERE ID = @ID_SABOR 
		END
		FETCH C_SABOR INTO @ID_SABOR, @SABOR
	END
	CLOSE C_SABOR
	DEALLOCATE C_SABOR
END

-- LOCAL
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_LOCAL
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_LOCAL INT, @ESTADO VARCHAR(2), @CIDADE VARCHAR(255), @BAIRRO VARCHAR(255), @RUA VARCHAR(255), @NUMERO VARCHAR(8)

	DECLARE C_LOCAL CURSOR
	FOR SELECT L.ID, L.ESTADO, L.CIDADE, L.BAIRRO, L.RUA, L.NUMERO FROM AUX_LOCAL L

	OPEN C_LOCAL
	FETCH C_LOCAL INTO @ID_LOCAL, @ESTADO, @CIDADE, @BAIRRO, @RUA, @NUMERO

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE LOCAL NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT L.ID FROM DIM_LOCAL L WHERE @ID_LOCAL = L.ID)
		BEGIN
			INSERT INTO DIM_LOCAL(ESTADO, CIDADE, BAIRRO, RUA, NUMERO)
			VALUES(@ESTADO, @CIDADE, @BAIRRO, @RUA, @NUMERO)	
		END
		-- IF THE LOCAL ALREADY EXISTS IN THE OLAP THEN UPDATE
		ELSE
		BEGIN
			UPDATE DIM_LOCAL
			SET ESTADO = @ESTADO, 
				CIDADE = @CIDADE, 
				BAIRRO = @BAIRRO, 
				RUA = @RUA, 
				NUMERO = @NUMERO
			WHERE ID = @ID_LOCAL 
		END
		FETCH C_LOCAL INTO @ID_LOCAL, @ESTADO, @CIDADE, @BAIRRO, @RUA, @NUMERO
	END
	CLOSE C_LOCAL
	DEALLOCATE C_LOCAL
END

-- ESTABELECIMENTO
GO
CREATE OR ALTER PROCEDURE SP_ETL_STAGING_TO_OLAP_ESTABELECIMENTO
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_ESTABELECIMENTO INT, @ID_LOCAL INT, @NOME VARCHAR(255), @CNPJ VARCHAR(14)

	DECLARE C_ESTABELECIMENTO CURSOR
	FOR SELECT E.ID,E.ID_LOCAL, E.NOME, E.CNPJ FROM AUX_ESTABELECIMENTO E

	OPEN C_ESTABELECIMENTO
	FETCH C_ESTABELECIMENTO INTO @ID_ESTABELECIMENTO, @ID_LOCAL, @NOME, @CNPJ

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFY IF THE ESTABELECIMENTO NOT EXISTS IN THE OLAP THEN INSERT
		IF NOT EXISTS (SELECT E.ID FROM DIM_ESTABELECIMENTO E WHERE @ID_ESTABELECIMENTO = E.ID)
		BEGIN
			INSERT INTO DIM_ESTABELECIMENTO(ID_LOCAL, NOME, CNPJ)
			VALUES(@ID_LOCAL, @NOME, @CNPJ)	
		END
		-- IF THE ESTABELECIMENTO ALREADY EXISTS IN THE OLAP THEN UPDATE
		ELSE
		BEGIN
			UPDATE DIM_ESTABELECIMENTO
			SET NOME = @NOME, 
				CNPJ = @CNPJ
			WHERE ID = @ID_ESTABELECIMENTO 
		END
		FETCH C_ESTABELECIMENTO INTO @ID_ESTABELECIMENTO, @ID_LOCAL, @NOME, @CNPJ
	END
	CLOSE C_ESTABELECIMENTO
	DEALLOCATE C_ESTABELECIMENTO
END


-- DQL

EXEC SP_DIM_PRODUTO '2022-01-01'

SELECT * FROM DIM_PRODUTO

SELECT * FROM DIM_ADICIONAL

TRUNCATE TABLE DIM_ADICIONAL

EXEC SP_ETL_STAGING_TO_OLAP_ADICIONAL '2022-01-01'
EXEC SP_ETL_STAGING_TO_OLAP_LOCAL
EXEC SP_ETL_STAGING_TO_OLAP_ESTABELECIMENTO

SELECT * FROM TB_LOCAL
SELECT * FROM AUX_LOCAL
SELECT * FROM DIM_LOCAL
SELECT * FROM DIM_ESTABELECIMENTO